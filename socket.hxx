#pragma once

#include "Result.hxx"

#define AF_UNIX 1

#define EACCES 13
// EAFNOSUPPORT
#define EINVAL 22
#define EMFILE 24
#define ENFILE 23
// ENOBUFS
#define ENOMEM 12
// EPROTONOSUPPORT
// "Other errors may be generated by the underlying protocol modules."â€¦

// SOCK_CLOEXEC
// SOCK_NONBLOCK
// SOCK_STREAM

#if defined(__alpha__) || defined(__hppa__) || defined(__mips__) || defined(__sparc__)
#  error
#else
#  define EAFNOSUPPORT 97
#  define ENOBUFS 105
#  define EPROTONOSUPPORT 93
#  define SOCK_CLOEXEC 0x80000
#  define SOCK_NONBLOCK 0x800
#  define SOCK_STREAM 1
#  if defined(__arm__)
#    define __NR_socket 281
#  elif defined(__x86_64__)
#    define __NR_socket 41
#  else
#    error
#  endif
#endif

namespace linux {

static inline
auto
socket(int domain, int type, int protocol) noexcept
{
    enum Error
    {
        _E(ACCES),
        _E(AFNOSUPPORT),
        _E(INVAL),
        _E(MFILE),
        _E(NFILE),
        _E(NOBUFS),
        _E(NOMEM),
        _E(PROTONOSUPPORT),
    };

    Result<int, Error>
    result;

#if defined(__arm__)

    register Word r0 asm ("r0") = __NR_socket;
    register auto r1 asm ("r1") = domain;
    register auto r2 asm ("r2") = type;
    register auto r3 asm ("r3") = protocol;

    asm volatile ("swi 0x0"
                  : "=r" (r0)
                  : "r" (r0),
                    "r" (r1),
                    "r" (r2),
                    "r" (r3)
                  : "memory");

    result.__word = r0;

#elif defined(__x86_64__)

    asm volatile ("syscall"
                  : "=a" (result.__word)
                  : "a" (__NR_socket),
                    "D" (domain),
                    "S" (type),
                    "d" (protocol)
                  : "rcx", "r11");

#else
#  error
#endif

    return result;
}

}
